# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zv17_pM4sXIx0iLzcXGw6HH8qBSrEqBD
"""

import numpy as np
import matplotlib.pyplot as plt, seaborn as sns
import pandas as pd
import plotly.express as px
import warnings
warnings.filterwarnings('ignore')

df= pd.read_csv('/content/loan_approval_dataset.csv')
df.head()

df.info()

df.shape

df.describe()

df.tail()

df.isnull().sum()

df.head()

df.columns

df.rename(columns={' no_of_dependents': 'no_of_dependents'}, inplace=True)

for i in df.columns[2:]:
  sp=i.strip()
  df.rename(columns={i:sp}, inplace=True)

df.info()

df.duplicated().sum()

df['loan_status'].unique()

df['education']=df['education'].str.strip()
df['loan_status']=df['loan_status'].str.strip()

df.head()

px.box(df,y='residential_assets_value')

q1=df.describe()["residential_assets_value"]["25%"]
q3=df.describe()["residential_assets_value"]["75%"]

IQR=q3-q1

upper_limit=q3+1.5*IQR
lower_limit=q1-1.5*IQR

df["residential_assets_value"]=df["residential_assets_value"].clip(lower_limit,upper_limit)

px.box(df,y='residential_assets_value')

px.box(df,y='commercial_assets_value')

q1=df.describe()["commercial_assets_value"]["25%"]
q3=df.describe()["commercial_assets_value"]["75%"]

IQR=q3-q1

upper_limit=q3+1.5*IQR
lower_limit=q1-1.5*IQR

df["commercial_assets_value"]=df["commercial_assets_value"].clip(lower_limit,upper_limit)

px.box(df,y='commercial_assets_value')

px.box(df,y='bank_asset_value')

q1=df.describe()["bank_asset_value"]["25%"]
q3=df.describe()["bank_asset_value"]["75%"]

IQR=q3-q1

upper_limit=q3+1.5*IQR
lower_limit=q1-1.5*IQR

df["bank_asset_value"]=df["bank_asset_value"].clip(lower_limit,upper_limit)

px.box(df,y='bank_asset_value')

df.head()

df.sample(5)

sns.barplot(x=df['education'],y=df['loan_status'])
plt.xticks(rotation=45)
plt.show()

sns.scatterplot(x=df['education'],y=df['loan_status'])

sns.barplot(x=df['cibil_score'],y=df['loan_status'])
plt.xticks(rotation=46)
plt.show()

sns.scatterplot(x=df['cibil_score'],y=df['loan_status'])

sns.barplot(x=df['income_annum'],y=df['loan_status'])
plt.xticks(rotation=46)
plt.show()

df.head()

df.sample(5)

plt.figure(figsize=(13,10))
sns.boxplot(data=df)
plt.xticks(rotation=45)
plt.show()

print(df['education'].value_counts())
sns.countplot(x=df['education'],color="red")
plt.xticks(rotation=45)
plt.show()

print(df['self_employed'].value_counts())
sns.countplot(x=df['self_employed'],color="red")
plt.xticks(rotation=45)
plt.show()

print(df['cibil_score'].value_counts())
sns.countplot(x=df['cibil_score'],color="red")
plt.xticks(rotation=45)
plt.show()

df.head()

sns.distplot(df['bank_asset_value'])

a=np.log(df['bank_asset_value'][1])
a

np.exp(a)

df.drop(['loan_id'],axis=1,inplace=True)

df.head()

df['Total_assets_value']=df['residential_assets_value']+df['commercial_assets_value']+df['luxury_assets_value']+df['bank_asset_value']

df.head()

df.drop(['residential_assets_value','commercial_assets_value','luxury_assets_value','bank_asset_value'],axis=1,inplace=True)

df.head()

df=pd.get_dummies(df,columns=["education","self_employed"],drop_first=True)

df.head()

df["education_Not Graduate"]=df["education_Not Graduate"].astype('int')

df["self_employed_ Yes"]=df["self_employed_ Yes"].astype('int')

df.head()

df_new=df.copy()

df_new.head()

df.head()

df_new['income_annum_log']=np.log(df_new['income_annum']+1)
df_new['loan_amount_log']=np.log(df_new['loan_amount']+1)

df_new.head()

df_new.drop(['income_annum','loan_amount'],axis=1,inplace=True)

df_new.head()

df_new['Total_assets_value_log']=np.log(df_new['Total_assets_value']+1)

df_new.head()

df_new.drop(['Total_assets_value'],axis=1,inplace=True)

df_new.head()

df_new.info()

df_new=pd.get_dummies(df_new,columns=["loan_status"],drop_first=True)

df_new.head()

df_new["loan_status_Rejected"]=df_new["loan_status_Rejected"].astype('int')

df_new.head()

X=df_new.drop(columns=['loan_status_Rejected'])
y=df_new['loan_status_Rejected']

X.head()

for i in df.columns[3:5]:
  sp=i.strip()
  df.rename(columns={i:sp}, inplace=True)

df.head()

for i in df_new.columns[3:5]:
  sp=i.strip()
  df_new.rename(columns={i:sp}, inplace=True)

df_new.rename(columns={'education_Not Graduate': 'education_Not_Graduate', 'self_employed_ Yes': 'self_employed_Yes'}, inplace=True)

df_new.head()

y.head()

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=0)

from sklearn.metrics import r2_score,mean_absolute_error,mean_squared_error
from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR
from xgboost import XGBRegressor

lr=LinearRegression()
knn=KNeighborsRegressor()
dt=DecisionTreeRegressor(max_depth=17)
rf=RandomForestRegressor(n_estimators=99,random_state=0,max_samples=0.5,max_features=0.75,max_depth=17)
svr=SVR()
xgb=XGBRegressor()

lr.fit(X_train,y_train)

y_pred=lr.predict(X_test)

print("R2 score",r2_score(y_test,y_pred))
print("MAE",mean_absolute_error(y_test,y_pred))
print("MSE",mean_squared_error(y_test,y_pred))
print("RMSE",np.sqrt(mean_squared_error(y_test,y_pred)))

knn.fit(X_train,y_train)

y_pred=knn.predict(X_test)

print("R2 score",r2_score(y_test,y_pred))
print("MAE",mean_absolute_error(y_test,y_pred))
print("MSE",mean_squared_error(y_test,y_pred))
print("RMSE",np.sqrt(mean_squared_error(y_test,y_pred)))

dt.fit(X_train,y_train)

y_pred=dt.predict(X_test)

print("R2 score",r2_score(y_test,y_pred))
print("MAE",mean_absolute_error(y_test,y_pred))
print("MSE",mean_squared_error(y_test,y_pred))
print("RMSE",np.sqrt(mean_squared_error(y_test,y_pred)))

rf.fit(X_train,y_train)

y_pred=rf.predict(X_test)

print("R2 score",r2_score(y_test,y_pred))
print("MAE",mean_absolute_error(y_test,y_pred))
print("MSE",mean_squared_error(y_test,y_pred))
print("RMSE",np.sqrt(mean_squared_error(y_test,y_pred)))

1-(1-r2_score(y_test,y_pred))*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1)

svr.fit(X_train,y_train)

y_pred=svr.predict(X_test)

print("R2 score",r2_score(y_test,y_pred))
print("MAE",mean_absolute_error(y_test,y_pred))
print("MSE",mean_squared_error(y_test,y_pred))
print("RMSE",np.sqrt(mean_squared_error(y_test,y_pred)))

xgb.fit(X_train,y_train)

y_pred=xgb.predict(X_test)

print("R2 score",r2_score(y_test,y_pred))
print("MAE",mean_absolute_error(y_test,y_pred))
print("MSE",mean_squared_error(y_test,y_pred))
print("RMSE",np.sqrt(mean_squared_error(y_test,y_pred)))

1-(1-r2_score(y_test,y_pred))*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1)

X_train.head()

df_new.head()

X.head()

df_new['no_of_dependents'].unique()

X.columns

X.info()

df_new.columns

def predict(no_of_dependents, loan_term, cibil_score, education_Not_Graduate, self_employed_Yes, income_annum_log, loan_amount_log, Total_assets_value_log):

  inp_df= xgb.predict([[no_of_dependents	,loan_term	,cibil_score	,education_Not_Graduate	,self_employed_Yes	,income_annum_log	,loan_amount_log,Total_assets_value_log]])

  a=inp_df
  b=np.exp(a)
  final_status=b.astype('int')
  if final_status==1:
    print("Loan Approved")
  else:
    print("Loan Rejected")

predict(2,12,580,1,1,16.077274,17.213369,17.730529)

y_test.value_counts()